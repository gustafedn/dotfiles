# Determine OS type
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    export OS_TYPE="linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    export OS_TYPE="macos"
else
    export OS_TYPE="unknown"
fi

# Atuin setup (works on both platforms)
if [[ -f "$HOME/.atuin/bin/env" ]]; then
    . "$HOME/.atuin/bin/env"
    eval "$(atuin init zsh)"
fi

# Starship setup (works on both platforms)
if command -v starship &> /dev/null; then
    eval "$(starship init zsh)"
fi

# Disable underline
(( ${+ZSH_HIGHLIGHT_STYLES} )) || typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[path]=none
ZSH_HIGHLIGHT_STYLES[path_prefix]=none

# zsh plugins setup based on OS
if [[ "$OS_TYPE" == "macos" ]]; then
    # macOS (Homebrew) paths
    if command -v brew &> /dev/null; then
        # zsh-autosuggestions
        if [[ -f "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
            source "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
        fi
        
        # zsh-syntax-highlighting
        if [[ -f "$(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
            source "$(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
        fi
    fi
    
    # broot for macOS
    if [[ -f "/Users/gustafeden/.config/broot/launcher/bash/br" ]]; then
        source "/Users/gustafeden/.config/broot/launcher/bash/br"
    fi
elif [[ "$OS_TYPE" == "linux" ]]; then
    # Linux paths for zsh plugins
    
    # Common locations for zsh-autosuggestions
    if [[ -f "/usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
        source "/usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    elif [[ -f "$HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
        source "$HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
    fi
    
    # Common locations for zsh-syntax-highlighting
    if [[ -f "/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
        source "/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    elif [[ -f "$HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
        source "$HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    fi
    
    # broot for Linux
    if [[ -f "$HOME/.config/broot/launcher/bash/br" ]]; then
        source "$HOME/.config/broot/launcher/bash/br"
    fi
fi

# Run neofetch if available
if command -v neofetch &> /dev/null; then
    neofetch
fi

# Key bindings (work on both platforms)
bindkey "^[[1;3C" forward-word
bindkey "^[[1;3D" backward-word

alias cm=chezmoi

reload() { 
  exec zsh 
}
dxp_prog() {
  cd ~/elux/dxp-progman
}
dxp_ui() {
  cd elux/dxp-flutter_gui/packages/oven
}
run_oven() {
  fvm flutter run -d linux lib/main_for_external_screen.dart
}
start_gdm() {
  sudo systemctl start gdm3
}
cm_sync() {
  cm update && cm apply && exec zsh
}

cm_push() {
  echo "Pushing all changes to dotfiles repo"
  local prev_dir
  prev_dir="$(pwd)"  # Save where we started

  local source_path
  source_path="$(chezmoi source-path)"

  cd "$source_path" || { echo "Failed to cd to chezmoi source path."; return 1; }

  # Get list of changed files
  local changes
  changes=$(git status --porcelain)

  if [[ -z "$changes" ]]; then
    echo "No changes to commit."
    cd "$prev_dir"
    return 0
  fi

  # Stage everything
  git add .

  # Generate commit message from changed filenames
  local summary
  summary=$(echo "$changes" | awk '{print $2}' | tr '\n' ' ' | sed 's/ $//')

  local msg="update: $summary"

  # Commit and push
  git commit -m "$msg"
  git push

  cd "$prev_dir" || echo "Warning: Failed to return to original directory ($prev_dir)"
}

export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"